// Code generated by "stringer -type=OperandType -output=operandtype_string.go"; DO NOT EDIT.

package operand

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[None-1]
	_ = x[I8_R8-2]
	_ = x[I16_R16-3]
	_ = x[I32_R32-4]
	_ = x[Ix_R8-5]
	_ = x[Ix_AR32-6]
	_ = x[Ix_AI8-7]
	_ = x[Ix_AI16-8]
	_ = x[Ix_AI32-9]
	_ = x[R32_R32_S2-10]
	_ = x[R32_R32_S4-11]
	_ = x[R16_R16-12]
	_ = x[R8_R16-13]
	_ = x[R16_R32-14]
	_ = x[R8_R16_MULXS_DIVXS-15]
	_ = x[R16_R32_MULXS_DIVXS-16]
	_ = x[R32_AI16-17]
	_ = x[AI16_R32-18]
	_ = x[R16_AI16-19]
	_ = x[AI16_R16-20]
	_ = x[R16_AI32-21]
	_ = x[AI32_R16-22]
	_ = x[AR32_R32-23]
	_ = x[R32_AR32-24]
	_ = x[AR32_R16-25]
	_ = x[R16_AR32-26]
	_ = x[AR32_R8-27]
	_ = x[R8_AR32-28]
	_ = x[O16-29]
	_ = x[I24-30]
	_ = x[S2_IMM-31]
	_ = x[I8_EXR-32]
	_ = x[Ix_R8_SH-33]
	_ = x[Ix_R16_SH-34]
	_ = x[Ix_R32_SH-35]
	_ = x[R8-36]
	_ = x[R8_STC-37]
	_ = x[R8_LDC-38]
	_ = x[R16-39]
	_ = x[R32-40]
	_ = x[R8_R8-41]
	_ = x[AR32_R32R32-42]
	_ = x[R32R32_AR32-43]
	_ = x[R32_AI32-44]
	_ = x[AI32_R32-45]
	_ = x[AR32_S2-46]
	_ = x[AI16R32_R16-47]
	_ = x[R16_AI16R32-48]
	_ = x[R8_AI32_BCLR-49]
	_ = x[R8_AI16-50]
	_ = x[R8_AI16_S6-51]
	_ = x[AI16_R8-52]
	_ = x[AI32R32_R8-53]
	_ = x[AI32R32_R16-54]
	_ = x[R16_AI32R32-55]
	_ = x[R8_AI32R32-56]
	_ = x[R8_AR32_BCLR-57]
	_ = x[AI32R32_R32-58]
	_ = x[R32_AI32R32-59]
	_ = x[AI16R32_R32-60]
	_ = x[R32_AI16R32-61]
	_ = x[AI16R32_CCR-62]
	_ = x[CCR_AI16R32-63]
	_ = x[AI32R32_CCR-64]
	_ = x[CCR_AI32R32-65]
	_ = x[AI16R32_R8-66]
	_ = x[R8_AI16R32-67]
	_ = x[Ix_R32_ADDS_SUBS-68]
	_ = x[Ix_R8_INC_DEC-69]
	_ = x[Ix_R16_INC_DEC-70]
	_ = x[Ix_R32_INC_DEC-71]
	_ = x[R8_AI8-72]
	_ = x[AI8_R8-73]
	_ = x[R8_AI8_BCLR-74]
	_ = x[S4_R32-75]
	_ = x[AI16_CCR-76]
	_ = x[CCR_AI16-77]
	_ = x[AI32_CCR-78]
	_ = x[CCR_AI32-79]
	_ = x[CCR_AR32-80]
	_ = x[TRAPA_Ix-81]
}

const _OperandType_name = "UnknownNoneI8_R8I16_R16I32_R32Ix_R8Ix_AR32Ix_AI8Ix_AI16Ix_AI32R32_R32_S2R32_R32_S4R16_R16R8_R16R16_R32R8_R16_MULXS_DIVXSR16_R32_MULXS_DIVXSR32_AI16AI16_R32R16_AI16AI16_R16R16_AI32AI32_R16AR32_R32R32_AR32AR32_R16R16_AR32AR32_R8R8_AR32O16I24S2_IMMI8_EXRIx_R8_SHIx_R16_SHIx_R32_SHR8R8_STCR8_LDCR16R32R8_R8AR32_R32R32R32R32_AR32R32_AI32AI32_R32AR32_S2AI16R32_R16R16_AI16R32R8_AI32_BCLRR8_AI16R8_AI16_S6AI16_R8AI32R32_R8AI32R32_R16R16_AI32R32R8_AI32R32R8_AR32_BCLRAI32R32_R32R32_AI32R32AI16R32_R32R32_AI16R32AI16R32_CCRCCR_AI16R32AI32R32_CCRCCR_AI32R32AI16R32_R8R8_AI16R32Ix_R32_ADDS_SUBSIx_R8_INC_DECIx_R16_INC_DECIx_R32_INC_DECR8_AI8AI8_R8R8_AI8_BCLRS4_R32AI16_CCRCCR_AI16AI32_CCRCCR_AI32CCR_AR32TRAPA_Ix"

var _OperandType_index = [...]uint16{0, 7, 11, 16, 23, 30, 35, 42, 48, 55, 62, 72, 82, 89, 95, 102, 120, 139, 147, 155, 163, 171, 179, 187, 195, 203, 211, 219, 226, 233, 236, 239, 245, 251, 259, 268, 277, 279, 285, 291, 294, 297, 302, 313, 324, 332, 340, 347, 358, 369, 381, 388, 398, 405, 415, 426, 437, 447, 459, 470, 481, 492, 503, 514, 525, 536, 547, 557, 567, 583, 596, 610, 624, 630, 636, 647, 653, 661, 669, 677, 685, 693, 701}

func (i OperandType) String() string {
	if i < 0 || i >= OperandType(len(_OperandType_index)-1) {
		return "OperandType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OperandType_name[_OperandType_index[i]:_OperandType_index[i+1]]
}
